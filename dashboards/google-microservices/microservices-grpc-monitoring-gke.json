{
  "dashboardFilters": [],
  "displayName": "Microservices (gRPC) Monitoring - GKE",
  "labels": {},
  "mosaicLayout": {
    "columns": 12,
    "tiles": [
      {
        "height": 24,
        "widget": {
          "collapsibleGroup": {
            "collapsed": false
          },
          "title": "Client Side Metrics"
        },
        "width": 12,
        "xPos": 0,
        "yPos": 0
      },
      {
        "height": 20,
        "widget": {
          "collapsibleGroup": {
            "collapsed": false
          },
          "title": "Server Side Metrics"
        },
        "width": 12,
        "xPos": 0,
        "yPos": 24
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Error Percentages",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/completed_rpcs\n| align delta(1m)\n| every 1m\n| { t_0: \n      filter (metric.grpc_client_status != 'OK')\n      | group_by drop[metric.grpc_client_status],\n          [error_rpcs_aggregate: aggregate(value.completed_rpcs)]\n  ; t_1:\n      group_by drop[metric.grpc_client_status],\n        [completed_rpcs_aggregate: aggregate(value.completed_rpcs)] }\n| ratio\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 4
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Concurrency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | { t_0:\n      metric 'custom.googleapis.com/opencensus/grpc.io/client/started_rpcs'\n        | align delta(1m)\n        | every 1m\n      ; t_1:\n      metric 'custom.googleapis.com/opencensus/grpc.io/client/completed_rpcs'\n        | align delta(1m)\n        | every 1m\n        | group_by drop [metric.grpc_client_status],\n            [completed_rpcs_aggregate: aggregate(value.completed_rpcs)] }\n  | outer_join [0]\n  | value [concurrent_rpcs: sub(t_0.started_rpcs, t_1.completed_rpcs_aggregate)]\n  | filter (val() >= 0)\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 0
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Requests",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric 'custom.googleapis.com/opencensus/grpc.io/client/completed_rpcs'\n  | filter (metric.grpc_client_status == 'OK')\n  | align rate(1m)\n  | every 1m\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 0
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Errors",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric 'custom.googleapis.com/opencensus/grpc.io/client/completed_rpcs'\n  | filter (metric.grpc_client_status != 'OK')\n  | align rate(1m)\n  | every 1m\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 4
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Error Percentages",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/server/completed_rpcs\n| align delta(1m)\n| every 1m\n| { t_0: \n      filter (metric.grpc_server_status != 'OK')\n      | group_by drop[metric.grpc_server_status],\n          [error_rpcs_aggregate: aggregate(value.completed_rpcs)]\n  ; t_1:\n      group_by drop[metric.grpc_server_status],\n        [completed_rpcs_aggregate: aggregate(value.completed_rpcs)] }\n| ratio\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 28
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Concurrency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | { t_0:\n      metric 'custom.googleapis.com/opencensus/grpc.io/server/started_rpcs'\n        | align delta(1m)\n        | every 1m\n      ; t_1:\n      metric 'custom.googleapis.com/opencensus/grpc.io/server/completed_rpcs'\n        | align delta(1m)\n        | every 1m\n        | group_by drop [metric.grpc_server_status],\n            [completed_rpcs_aggregate: aggregate(value.completed_rpcs)] }\n  | outer_join [0]\n  | value [concurrent_rpcs: sub(t_0.started_rpcs, t_1.completed_rpcs_aggregate)]\n  | filter (val() >= 0)\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 24
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Requests",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric 'custom.googleapis.com/opencensus/grpc.io/server/completed_rpcs'\n  | filter (metric.grpc_server_status == 'OK')\n  | align rate(1m)\n  | every 1m\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 24
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Errors",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric 'custom.googleapis.com/opencensus/grpc.io/server/completed_rpcs'\n  | filter (metric.grpc_server_status != 'OK')\n  | align rate(1m)\n  | every 1m\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 28
      },
      {
        "height": 4,
        "widget": {
          "title": "Client RTT Latency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n    | metric custom.googleapis.com/opencensus/grpc.io/client/roundtrip_latency\n    | group_by 1m, [roundtrip_latency_aligned: aggregate(value.roundtrip_latency)]\n    | every 1m\n    | group_by [], [roundtrip_latency_aggregated: aggregate(roundtrip_latency_aligned)]\n    | { t_0:\n          group_by [], [roundtrip_latency_stats_value: percentile(roundtrip_latency_aggregated, 50)]\n            | map add[roundtrip_latency_stats_tag: '50 percentile']\n      ; t_1:\n          group_by [], [roundtrip_latency_stats_value: percentile(roundtrip_latency_aggregated, 95)]\n            | map add[roundtrip_latency_stats_tag: '95 percentile']\n      ; t_2:\n          group_by [], [roundtrip_latency_stats_value: percentile(roundtrip_latency_aggregated, 99)]\n            | map add[roundtrip_latency_stats_tag: '99 percentile']\n      ; t_3:\n          group_by [], [roundtrip_latency_stats_value: mean(roundtrip_latency_aggregated)]\n            | map add[roundtrip_latency_stats_tag: 'mean']}\n    | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 8
      },
      {
        "height": 4,
        "widget": {
          "title": "Client RTT Latency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/roundtrip_latency\n  | align delta(1m)\n  | every 1m\n  | group_by [], [roundtrip_latency_aggregate: aggregate(value.roundtrip_latency)]\n  | map add[legend_tag: 'Client RTT Latency']"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 8
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Sent Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/sent_compressed_message_bytes_per_rpc\n  | group_by 1m, [sent_compressed_message_bytes_per_rpc_aligned: aggregate(value.sent_compressed_message_bytes_per_rpc)]\n  | every 1m\n  | group_by [], [sent_compressed_message_bytes_per_rpc_aggregated: aggregate(sent_compressed_message_bytes_per_rpc_aligned)]\n  | { t_0:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: percentile(sent_compressed_message_bytes_per_rpc_aggregated, 50)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: '50 percentile']\n    ; t_1:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: percentile(sent_compressed_message_bytes_per_rpc_aggregated, 95)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: '95 percentile']\n    ; t_2:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: percentile(sent_compressed_message_bytes_per_rpc_aggregated, 99)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: '99 percentile']\n    ; t_3:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: mean(sent_compressed_message_bytes_per_rpc_aggregated)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: 'mean']}\n  | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 16
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Sent Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/sent_compressed_message_bytes_per_rpc\n  | align delta(1m)\n  | every 1m\n  | group_by [], [sent_compressed_message_bytes_per_rpc_aggregate: aggregate(value.sent_compressed_message_bytes_per_rpc)]\n  | map add[legend_tag: 'Client Sent Compressed Message Bytes per RPC']\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 16
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Received Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/received_compressed_message_bytes_per_rpc\n  | align delta(1m)\n  | every 1m\n  | group_by [], [received_compressed_message_bytes_per_rpc_aggregate: aggregate(value.received_compressed_message_bytes_per_rpc)]\n  | map add[legend_tag: 'Client Received Compressed Message Bytes per RPC']\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 20
      },
      {
        "height": 4,
        "widget": {
          "title": "Client Received Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/received_compressed_message_bytes_per_rpc\n  | group_by 1m, [received_compressed_message_bytes_per_rpc_aligned: aggregate(value.received_compressed_message_bytes_per_rpc)]\n  | every 1m\n  | group_by [], [received_compressed_message_bytes_per_rpc_aggregated: aggregate(received_compressed_message_bytes_per_rpc_aligned)]\n  | { t_0:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: percentile(received_compressed_message_bytes_per_rpc_aggregated, 50)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: '50 percentile']\n    ; t_1:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: percentile(received_compressed_message_bytes_per_rpc_aggregated, 95)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: '95 percentile']\n    ; t_2:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: percentile(received_compressed_message_bytes_per_rpc_aggregated, 99)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: '99 percentile']\n    ; t_3:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: mean(received_compressed_message_bytes_per_rpc_aggregated)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: 'mean']}\n  | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 20
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Sent Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/server/sent_compressed_message_bytes_per_rpc\n  | group_by 1m, [sent_compressed_message_bytes_per_rpc_aligned: aggregate(value.sent_compressed_message_bytes_per_rpc)]\n  | every 1m\n  | group_by [], [sent_compressed_message_bytes_per_rpc_aggregated: aggregate(sent_compressed_message_bytes_per_rpc_aligned)]\n  | { t_0:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: percentile(sent_compressed_message_bytes_per_rpc_aggregated, 50)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: '50 percentile']\n    ; t_1:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: percentile(sent_compressed_message_bytes_per_rpc_aggregated, 95)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: '95 percentile']\n    ; t_2:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: percentile(sent_compressed_message_bytes_per_rpc_aggregated, 99)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: '99 percentile']\n    ; t_3:\n        group_by [], [sent_compressed_message_bytes_per_rpc_stats_value: mean(sent_compressed_message_bytes_per_rpc_aggregated)]\n          | map add[sent_compressed_message_bytes_per_rpc_stats_tag: 'mean']}\n  | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 36
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Received Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/server/received_compressed_message_bytes_per_rpc\n  | align delta(1m)\n  | every 1m\n  | group_by [], [received_compressed_message_bytes_per_rpc_aggregate: aggregate(value.received_compressed_message_bytes_per_rpc)]\n  | map add[legend_tag: 'Server Received Compressed Message Bytes per RPC']\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 40
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Received Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/server/received_compressed_message_bytes_per_rpc\n  | group_by 1m, [received_compressed_message_bytes_per_rpc_aligned: aggregate(value.received_compressed_message_bytes_per_rpc)]\n  | every 1m\n  | group_by [], [received_compressed_message_bytes_per_rpc_aggregated: aggregate(received_compressed_message_bytes_per_rpc_aligned)]\n  | { t_0:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: percentile(received_compressed_message_bytes_per_rpc_aggregated, 50)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: '50 percentile']\n    ; t_1:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: percentile(received_compressed_message_bytes_per_rpc_aggregated, 95)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: '95 percentile']\n    ; t_2:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: percentile(received_compressed_message_bytes_per_rpc_aggregated, 99)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: '99 percentile']\n    ; t_3:\n        group_by [], [received_compressed_message_bytes_per_rpc_stats_value: mean(received_compressed_message_bytes_per_rpc_aggregated)]\n          | map add[received_compressed_message_bytes_per_rpc_stats_tag: 'mean']}\n  | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 40
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Sent Compressed Message Bytes per RPC",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/server/sent_compressed_message_bytes_per_rpc\n  | align delta(1m)\n  | every 1m\n  | group_by [], [sent_compressed_message_bytes_per_rpc_aggregate: aggregate(value.sent_compressed_message_bytes_per_rpc)]\n  | map add[legend_tag: 'Server Sent Compressed Message Bytes per RPC']\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 36
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Latency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n    | metric custom.googleapis.com/opencensus/grpc.io/server/server_latency\n    | group_by 1m, [server_latency_aligned: aggregate(value.server_latency)]\n    | every 1m\n    | group_by [], [server_latency_aggregated: aggregate(server_latency_aligned)]\n    | { t_0:\n          group_by [], [server_latency_stats_value: percentile(server_latency_aggregated, 50)]\n            | map add[server_latency_stats_tag: '50 percentile']\n      ; t_1:\n          group_by [], [server_latency_stats_value: percentile(server_latency_aggregated, 95)]\n            | map add[server_latency_stats_tag: '95 percentile']\n      ; t_2:\n          group_by [], [server_latency_stats_value: percentile(server_latency_aggregated, 99)]\n            | map add[server_latency_stats_tag: '99 percentile']\n      ; t_3:\n          group_by [], [server_latency_stats_value: mean(server_latency_aggregated)]\n            | map add[server_latency_stats_tag: 'mean']}\n    | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 32
      },
      {
        "height": 4,
        "widget": {
          "title": "Server Latency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/server/server_latency\n  | align delta(1m)\n  | every 1m\n  | group_by [], [server_latency_aggregate: aggregate(value.server_latency)]\n  | map add[legend_tag: 'Server Latency']\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 32
      },
      {
        "height": 4,
        "widget": {
          "title": "Client API Latency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n    | metric custom.googleapis.com/opencensus/grpc.io/client/api_latency\n    | group_by 1m, [api_latency_aligned: aggregate(value.api_latency)]\n    | every 1m\n    | group_by [], [api_latency_aggregated: aggregate(api_latency_aligned)]\n    | { t_0:\n          group_by [], [api_latency_stats_value: percentile(api_latency_aggregated, 50)]\n            | map add[api_latency_stats_tag: '50 percentile']\n      ; t_1:\n          group_by [], [api_latency_stats_value: percentile(api_latency_aggregated, 95)]\n            | map add[api_latency_stats_tag: '95 percentile']\n      ; t_2:\n          group_by [], [api_latency_stats_value: percentile(api_latency_aggregated, 99)]\n            | map add[api_latency_stats_tag: '99 percentile']\n      ; t_3:\n          group_by [], [api_latency_stats_value: mean(api_latency_aggregated)]\n            | map add[api_latency_stats_tag: 'mean']}\n    | union\n"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 0,
        "yPos": 12
      },
      {
        "height": 4,
        "widget": {
          "title": "Client API Latency",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "plotType": "HEATMAP",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesQueryLanguage": "fetch k8s_container\n  | metric custom.googleapis.com/opencensus/grpc.io/client/api_latency\n  | align delta(1m)\n  | every 1m\n  | group_by [], [api_latency_aggregate: aggregate(value.api_latency)]\n  | map add[legend_tag: 'Client API Latency']"
                }
              }
            ],
            "thresholds": [],
            "timeshiftDuration": "0s"
          }
        },
        "width": 6,
        "xPos": 6,
        "yPos": 12
      }
    ]
  }
}